Docker Certification Programme 
6th May 2023

#################
6th May. - Day 1
#################


	Jenkins ==> 		
		CI/CD
		Master Slave 

	Application Build and Deployment :::

	Application :

		- Monolith Application Architecture
			Tightly coupled.
			Modularity is not here.

		- Micorservice based Application Architecture

			Appln.
				Splitted into various Modules/micro-services

	Web-Application
	Desktop Application
	Mobile Application

	Web-Application:
		E-Commerce - portal
		facebook, Netflix


	In Micorservice based Application Architecture ::

	Facebook Application:

	Sign-up
	Sign-In
	Search
	Post

	E-Commerce Application:

	Sign-up
	Sign-In		==> develop -- test -- deliver/deploy this service
	Search
	Add to cart
	Place order
	Payment
	Track

	To effectively deploy Microservice based Applications we use Containers


	Jenkins ==> 		
		CI/CD
		Master Slave 


	Development perspective ::

	Devloper1:

	Sign-In 		signin.java
		- Code
		- Managed in Source Code Repo. (Github)
		- build	- It is a process of compile the Source Code & Create Artifacts(binaries)
			Using Maven build tools --> *.war / *.jar file / *.dll / *.exec

		- Deployed to Test Environments
			QA 
			UAT
			Pre-Prod / Staging 

		- Deployed to Prod Environments


	Devloper2:

	Payment 		payment.java
		- Code
		- Managed in Source Code Repo. (Github)
		- build	- It is a process of compile the Source Code & Create Artifacts(binaries)
			Using Maven build tools --> *.war / *.jar file / *.dll / *.exec

		- Deployed to Test Environments
			QA 
			UAT
			Pre-Prod / Staging 

		- Deployed to Prod Environments


	CI - > Continuous Integration 
	CD - > 
		Continuous Delivery 	==> Required Manual Approval for Prod Release 
		/ Deployment  		==> Completely automated Prod Release - No Manual Approval need for prod release. 



	CI/CD Pipeline Workflow :::


	Pipeline : Stages
	Stage1 : 
		SCM-Checkout 
	Stage2 : 
		Application Build
	Stage3 : 
		Automated Unit Testing
	Stage4 : 
		Deploy to QA Environment
	Stage5 : 
		Perform QA Testing
	Stage6 : 
		Deploy to UAT Environment
	Stage7 : 
		Perform UAT Testing

	Stage8 : 
		Deploy to PROD Environment


	Environments::

	Non-Prod Envi.					Prod Envi.
		DEV
		TEST
		  QA
		  UAT			==> 		Prod.

	Banking/FIN/INS Domain

		Security 
		Infra
		Testing
		Release Management Team
		BU

	Facebook / Google / Netflix / amazon.com

		Conti. Deployment 


Challenges faced in Microservice based applications without Containers :::

	Developer2:

	Payment 		payment.java
		- Code
		- Managed in Source Code Repo. (Github)

		- build	- It is a process of compile the Source Code & Create Artifacts(binaries)
			Using Maven build tools --> *.war_v1.0 / *.jar file / *.dll / *.exec

			Unit Testing					*.war_v1.0
			Application Server like Tomcat / Nginx
					jdk1.7 , tomcat 9

			Using Container Images ==> Package the *.war file along with its dependencies

				Image ==> (*.war_v1.0,jdk1.7,tomcat9) == payment_app_img_cr1

		- Deployed to Test Environments
			QA 		payment_app_img_cr1 -- Run/test this appln. using container
			UAT		payment_app_img_cr1
			Pre-Prod / Staging  payment_app_img_cr1

		- Deployed to Prod Environments payment_app_img_cr1


	Virtual Machines :::


	On Infra-structure perspective we can use Containers
		
	Virtual Machines :::

		Jenkins Master Slave Architecture :::
	
	Non-Prod Environment :::
	
	Virtual Machines
		Jenkins Master 
			Slave1 		==>	Java Application
			Slave1.1 	==>	Java Application
			Slave2 		==>	Python Application
			Slave3 		==>	Angular/Node Application

	Using Containers we can reduce the no. of VMs	

	Virtual Machines
		Jenkins Master(VM)
			Slave_BuildServer(VM) --> VM Computing Device --> EBS 
				Install Docker Container Engine 
					Create any no. of Containers
						Container1 --> Java Application Image ==> (*.war_v1.0,jdk1.7,tomcat9)
						Container2 --> Python Application
						Container3 --> Angular Application


			Slave1 		==>	Java Application (*.war_v1.0,jdk1.7,tomcat9) 120MB
			Slave1.1 	==>	Java Application
			Slave2 		==>	Python Application
			Slave3 		==>	Angular/Node Application

		Jenkins Master(VM)
			Slave_BuildServer1(VM) --> VM Computing Device --> EBS 
				Install Docker Container Engine 
					Create any no. of Containers
						Container1 --> Java Application Image ==> (*.war_v1.0,jdk1.7,tomcat9)
						Container2 --> Python Application
						Container3 --> Angular Application

Ansible contoller ::
	Slave_BuildServer1(VM)
	Slave_BuildServer2(VM)


			Slave_BuildServer1(VM) --> VM Computing Device --> EBS 
				Install Docker Container Engine 
					Create any no. of Containers
						Container1.0 --> Java Application Image ==> (*.war_v1.0,jdk1.7,tomcat10)
						Container1.1 --> Java Application Image ==> (*.war_v2.0,jdk1.8,tomcat9)
						Container1.2 --> Java Application Image ==> (*.war_v3.0,jdk1.6,tomcat8.5)
						Container1.3 --> Java Application Image ==> (*.war_v4.0,jdk1.8,tomcat8)
						Container2 --> Python Application
						Container3 --> Angular Application


Dynamically Create the servers using Terraform & Config using Ansible :

Ansible contoller ::
	Slave_BuildServer1(VM)
	Slave_BuildServer2(VM)

	Virtual Machine :::: use the Hardware level virtualization

		Windows OS - 16GB RAM 2 CPUs

		Virtual Machine for Linux OS
			On-premises
			Cloud 

	Containers :::: Use the OS level Virtualization


Lab & Demo ::
	
	AWS Platform 

		AWS EC2 Instances
			Install docker		


free - tier account in AWS - > 

github account??


Pre-requisites for Demo / Practise :::


	AWS Cloud Provider
	Github 
	Dockerhub account 


Next ::::
	How to Install Docker 
	Work on docker Register - Dockerhub
	Docker CLI Commands.

	MobaXterm / putty == SSH Client ??
	Linux -- RHEL / Centos 



	Class / Instructor rating

	1	Execellent
	0	Good 
	-1	Avg/bad



#################
7th May. - Day 2
#################

	- Docker Terminologies
	- Docker Installation & Startup
	- Docker CLI Commands
	- Working with Dockerhub and Images
	- Working with Containers

	https://mobaxterm.mobatek.net/download.html

	https://docs.docker.com/engine/install/centos/

	https://hub.docker.com/


	Image ==> Static package of application -(*.war,dependencies) - (*.war_v1.0,jdk1.7,tomcat9) - mywebappimg1

		To Create Image :::
 		 docker Commit
		 docker build		Dockerfile 

	Containers ==> Containers are called as executable units of Images


	Container ::: 

		Applications :
			Stateless 	--> 
			Stateful	--> logs,report,manifest contents

	Container Volume :: 

	Docker Registry :: store and manage the container Images --> www.dockerhub.com		
		Repository --> 

	AWS - ECS - ECR - EKS
	Az - 


	Microservice :

	User_Registration ::

		front-end		c1
		business-logic		c2
		backend(database)	c3

	docker Compose 
		manifest file

	Container Orchestion Tool:
		swarm  		-- Docker container
		Kubernetes	-- Any container Orchestration


	SSH Client to access remote servers ::
		MobaXterm	
		Putty	
	

	docker hub ==> 



	DevOps Team ::


	Build_Server --> VM
		Javaweb_appln. ===> git,jdk,maven

		Container.
			use centos image ==> install git,jdk,maven

		Create new image out of this - java_app_build_image -- (Centos,git,jdk,maven)
	
	Application_Server --> VM

	
		jdk,tomcat --> 
			<public_ip_of_VM>:8080
			
	

		Container.
			use centos image ==> install jdk,tomcat

		Create new image out of this - java_app_tomcat_server_image -- (Centos,jdk,tomcat)

		docker commit 



	images
	containers
	volumes...

	docker pull
	
	docker run 

	run container ::: 


		background mode	- Detached mode

		***foreground mode	- attached mode
		
		Interative Mode - 


	docker inspect
	docker history 
	docker run -it | -d 
	docker rm 
	docker rmi

	tomcat ==> port 8080

	Port Binding / port Mapping

		host_port:container_Port
		-p 8085:8080
		<public_ip_of_VM>:8085

		docker run -it -p 8085:8080 tomcat:8.0

		-p host_port:container_port


	docker run -it <image_name> bash	==> Start the Containers using Image name

	docker exec -it <container_id> bash	==> Login to the running container using Container_ID
		


	Build_Server --> perfrom appln. build ==> artifacts *.war
		app_image(tomcat)/usr/local/tomcat/webapps/*.war


	VM							VM - QA_Server (Tomcat) 
	Jenkins_Master
	 Slave1 ==> build & Create artifacts			/opt/tomcat/webapps/*.war

	targets/*.war


    1  yum update -y
    2  clear
    3  yum install docker -y
    4  clear
    5  docker --version
    6  docker version
    7  systemctl start docker
    8  systemctl status docker
    9  systemctl enable docker
   10  history
   11  clear
   12  docker --version
   13  docker images
   14  docker ps
   15  docker ps -a
   16  docker pull centos
   17  docker images
   18  docker ps
   19  docker ps -a
   20  docker run centos
   21  docker ps
   22  docker ps -a
   23  docker run centos
   24  docker ps -a
   25  clear
   26  docker ps -a
   27  docker run centos
   28  docker ps -a
   29  docker images
   30  docker run ubuntu
   31  docker ps -a
   32  clear
   33  docker images
   34  docker run -d centos
   35  docker ps
   36  docker run -d centos sleep 20
   37  docker ps
   38  docker ps -a
   39  clear
   40  docker run centos sleep 20
   41  docker ps -a
   42  clear
   43  docker run centos sleep 30
   44  clear
   45  docker images
   46  docker run -it centos bash
   47  clear
   48  docker run centos sleep 10
   49  docker images
   50  docker ps -a
   51  docker rmi 3b418d7b466a
   52  docker rm c2e57b
   53  docker rmi 3b418d7b466a
   54  docker images
   55  clear
   56  docker ps -a
   57  docker rm 1247b 2c8c18
   58  clear
   59  docker run centos sleep 50
   60  clear
   61  docker run -it -p 8085:8080 tomcat:8.0
   62  history



    1  clear
    2  docker ps
    3  clear
    4  docker ps
    5  docker run centos
    6  docker ps -a
    7  docker p
    8  docker ps
    9  clear
   10  docker ps
   11  docker stop 20033ccdc750
   12  docker ps -a
   13  docker images
   14  docker history 5d0da3dc9764
   15  docker inspect 20033ccdc750
   16  docker inspect centos
   17  clear
   18  docker ps
   19  docker run -it -p 8080:8080 tomcat:8.0
   20  history



##################
13th May. - Day 3
##################

		Docker Fundametals

			Docker Volumes
			Create Docker Images	
			Docker Registry (dockerhub)
			How to access dockerhub from docker cli
			How to push images from local machine to docker hub registry

			Actual Application -- Java Web application 
			
		Docker Volumes :::

		Application :::
			
			Appln. ==> produce --> log --> input to another container

			appli. monitoring tool --> server --> generate reports --> cont1


		Containers were introduced only for stateless application. 

		volumes -- stateful applications  --> appln. that leaves come trace of executions(logs,report)


		Container1 --> Appln. ===> Container volume

		Docker Volumes == used to create persistant volume for containers.

		docker volume command to create container volumes.

		docker run -it --mount source=edutestvol1,destination=/edutestvol1 centos bash


		Host Machine ::: volume -- dir1

		Container ::: 


		Application - java webapp ==> Container ==> secret file 
		file - - host 

		Java_proj
			src
				main
				test
			target
			app.properties

		Using Container Volumes ::

			appln. artifacts ==> /target/*.war
		cp target/*.war /var/lib/docker/volumes/v1/_data

		

		Create Docker Images :::


		centos Image ==> base image 
		

		docker commit 	

			centos Image ==> base image 
			1. centos 
			2. 
			
		Create Jenkins Slave Machine ::: (appln. build)
			Java maven application
				git,jdk,maven

				maven
				jdk
				git
				centos

		docker commit ==> Is used to create a image based on the container.



		docker commit <Container_ID> <Image_Name>:<tag>

		docker commit 8e7118c4949d loksaieta/mydebian-bs-git:v1.0
		docker run -it loksaieta/mydebian-bs-git:v1.0		

		docker build 
			VM --> ami image 

		login ==> yum update -y
			Images ==> Application / Server Templates

			Docker -- IAC -->

		 
		docker build == > used to create appln. 
				 need to create Dockerfile 


		1. Create Dockerfile

FROM debian
RUN apt-get update
RUN apt-get install git -y



		Best Practises :::: Image build ::: 
		
FROM debian
RUN apt-get update && apt-get install git -y	

		docker build ==> Dockerfile	

		Source code repo.	


	


		Image ::: ==> package -- non-executable -- portable 

		Common platform to store and manage the images
		 Container Registry ==> Dockerhub 
		

		Access Dockerhub using Docker CLI ==> 

					API

		Authentication is required to access the dockerhub repos.

		docker login -u loksaieta

		docker push loksaieta/edu-deb-git1
		password :


		Docker workflow ::::


		CI/CD Process :::
		
		Typical CI/CD --> How Many servers are needed ???

		Build and Deploy a web application(maven) 

				
		CI/CD :::

		Continuous Development --- CI -- CD/Deployment -- CT -- CM

		Non-Prod							Prod
		Dev-Environment
		Build-Environment
		Test
		  QA 
		  UAT 								Prod Environment 


		CI/CD -- Pipeline :::

		Stages ::::

		BUILD,TEST,PACKAGE,CODE_REVIEW,DEPLOY,MONITORING
		
		
	Developer :: Micro-service -- E_Commerce (payment_service)

		
		Development 
			--> Create Src Code --> perform unit testing	
		
				build -- compile the src code & Create artifacts --> Build appli. image

		Build_Server --> application build(artifacts) & Image Build(Docker Iamge)

		 	

		Test Environment 
			QA -- artifacts  -- tomcat / nginx
		
			UAT -- artifacts  -- tomcat / nginx		
		

		Deployed to PROD

		Non-Prod ::::

		Jenkins_Master :: --> Creating the jenkins projects & Schedule the projects in build servers / Nodes

			Slave1 - Build_Server --> application build(git,jdk,maven) && Image Build(Docker) App.Team1 -- Java
			Slave2 - Build_Server --> application build(git,jdk,maven) && Image Build(Docker) App.Team2 -- Python
			Slave3 - Build_Server --> application build(git,jdk,maven) && Image Build(Docker)

		Test_Server(QA/)


		Code is ready 

		Continuous Development 
			===> Create src code --> Push the src code to src_code Repo.(github)		

		Stages :::: Jenkins Pipeline 
		
			Stage1 --> SCM Checkout (Bring the scr code to Build_Server)
			Stage2 --> Build (Compile,Automated unit testing,create artifact - *.war)
			Stage3 --> Build Docker Image (docker build command with Dockerfile)
			Stage4 --> Publish Docker Image to Docker Registry

			Stage5 --> Deploy the Images from Docker Registry to any Target Environment
					QA/UAT/
					Docker Swarm
					Kubernetes Cluster

			Stage6 --> Monitoring the Applications/Infra.


		BUILD,TEST,PACKAGE,CODE_REVIEW,DEPLOY,MONITORING

		scm_checkout,code_review,build,unit_test,pkg,deploy,monitor

			DevOps -- Shift Left Approach 			


	
